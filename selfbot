const { Client, Channel } = require("discord.js-selfbot-v13")
const yes = "bankai"
const client = new Client({
  checkUpdate: false
});
const fetch = require('node-fetch');









const options = {
  hour: '2-digit',
  minute: '2-digit',
  timeZone: 'America/New_York',
  timeZoneName: 'short'
};

const date = new Date();
const formattedDate = date.toLocaleString('en-US', options);
const start_time = formattedDate;
client.on("ready", async () => {
  let statuschannel = client.channels.cache.get("1279923297307459637")

  statuschannel.send("Selfbot has been logged in. \n It is currently: `"+formattedDate+"`")
  console.log(start_time);
});

client.on("messageCreate", async (message) => {
  if (message.content.startsWith("!exit") && message.author.username === "blackeddout") {
    let statuschannel = client.channels.cache.get("1279923297307459637")
    message.delete()
    if (client.channelId === statuschannel) {
      const date = new Date();
      const loldate = date.toLocaleString('en-US', options);
    statuschannel.send("Selfbot has been logged out. \n It is currently: `"+loldate+"` \n The bot has been running since: `"+start_time+"`")
  } else{
    const date = new Date();
    const bruhdate = date.toLocaleString('en-US', options);
    let statuschannel = client.channels.cache.get("1279923297307459637")
    message.channel.send("Selfbot has been logged out. \n It is currently: `"+bruhdate+"` \n The bot has been running since: `"+start_time+"`")
    statuschannel.send("Selfbot has been logged out. \n It is currently: `"+bruhdate+"` \n The bot has been running since: `"+start_time+"`")
  }
    setTimeout(() => {
      process.exit();
    }, 200);
  }
})

client.on("messageDelete", async (deletedMessage) => {
  const chan = client.channels.cache.get("1279880652933828641")
if (deletedMessage) {
  try {
chan.send("__"+deletedMessage.author.tag+"__"+" Deleted a message: ```"+deletedMessage.content+"```")
  } catch (error) {
    console.error(error)
  }
}
});

client.on("messageDelete", async (deletedMessage) => {
  const cfc = client.channels.cache.get("1279882522553221170")
  const logChannel = client.channels.cache.get("1272296289966620776");
if (deletedMessage && deletedMessage.channelId === logChannel.id) {
  try {
    cfc.send("__"+deletedMessage.author.tag+"__"+" Deleted a message: ```"+deletedMessage.content+"```")
  } catch (error) {
    //
  }
}
});
const channelId = "1272296289966620776";
const logChannelId = "1279890094131777666";

client.on("messageUpdate", async (oldMessage, newMessage) => {
  if (oldMessage.content !== newMessage.content) {
    if (newMessage.channelId === channelId) {
      const logChannel = client.channels.cache.get(logChannelId);
      if (logChannel) {
        logChannel.send("__"+newMessage.author.tag+"__ Edited a message \n Previous: ```"+oldMessage.content+"``` \n New: ```"+newMessage.content+"```")
          .catch((error) => {
            console.error("Failed to send message to log channel:", error);
          });
      } else {
        console.error("Log channel not found");
      }
    }
  }
});

async function getId(name) {
  try {
    const response = await fetch('https://users.roblox.com/v1/usernames/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ usernames: [name], excludeBannedUsers: true })
    });
    const data = await response.json();
    return data.data[0].id;
  } catch (err) {
    return;
  }
}

async function getDisplay(name) {
  try {
    const response = await fetch('https://users.roblox.com/v1/usernames/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ usernames: [name], excludeBannedUsers: true })
    });
    const data = await response.json();
    return data.data[0].displayName;
  } catch (err) {
    return;
  }
}

async function getHeadShot(id) {

  const response = await fetch(`https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=${id}&size=75x75&format=Png&isCircular=false`);


  if (!response.ok) {
      throw new Error(`Failed to retrieve headshot: ${response.statusText}`);
  }


  const data = await response.json();

 
  return data.data[0].imageUrl;
}

async function getAvatar(avid) {
 
  const response = await fetch("https://thumbnails.roblox.com/v1/users/avatar?userIds="+avid+"&size=150x200&format=Png&isCircular=false");


  if (!response.ok) {
      throw new Error(`Failed to retrieve Avatar: ${response.statusText}`);
  }

 
  const data = await response.json();

  return data.data[0].imageUrl;
}







async function getUserPresence(userId) {
  const url = `https://presence.roblox.com/v1/presence/users`;
  const options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      userIds: [userId],
    }),
  };

  try {
    const response = await fetch(url, options);
    const data = await response.json();
    if (data.errors) {
      console.error(`Error response: ${JSON.stringify(data.errors, null, 2)}`);
      return null;
    }

    const userPresence = data.userPresences[0];
    let onlineStatus;
    switch (userPresence.userPresenceType) {
      case 0:
        onlineStatus = 'Offline';
        break;
      case 1:
        onlineStatus = 'Online';
        break;
      case 2:
        onlineStatus = 'In Game';
        break;
      default:
        onlineStatus = 'Unknown';
    }

   
    return onlineStatus



    return userPresence;
  } catch (error) {
    console.error(error);
    return null;
  }
}





async function lol(nm) {
  return await getId(nm)
}





client.on("messageCreate", async (message) => {
  if (message.content.startsWith("!status") && message.author.username === "blackeddout") {
    const splitnigga = message.content.split(' ')
    const usertosearch = splitnigga[1]
    lol(usertosearch).then(result => getUserPresence(result).then((userPresence) => {
      message.reply(usertosearch+" {Status} : "+userPresence)
    }))
  }
  if (message.content.startsWith("!test") && message.author.username === "blackeddout") {
    const splitnigga = message.content.split(' ')
    const usertosearch = splitnigga[1]
    lol(usertosearch).then(user => getAvatar(user).then(av => message.reply(av)))
  }
  if (message.content.startsWith("!lookup") && message.author.username === "blackeddout") {
    const splitnigga = message.content.split(' ')
    const usertosearch = splitnigga[1]
    lol(usertosearch).then(result => getHeadShot(result).then(hslink => message.channel.send(hslink)))
    setTimeout(() => {
      lol(usertosearch).then(result => getUserPresence(result).then((userPresence) => {
        getDisplay(usertosearch).then(DisplayNameez => 
          getId(usertosearch).then(USERIDDD => 
        message.channel.send("```ansi\n  [0;1mInformation : {[0;0m \n > [0;1mName:   "+usertosearch+"[0;0m \n > [0;1mDisplayName:   "+DisplayNameez+"[0;0m \n > [0;1mUserID:   "+USERIDDD+"[0;0m \n > [0;1mStatus : "+userPresence+ "  } [0;0m```")
      ))}))
    }, 25);
  }
})
client.login("yourtokenhere")
